# Generated by Django 4.2.7 on 2024-01-05 08:38

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='DayOfWeek',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isAuthor', models.BooleanField(default=False)),
                ('subscribers', models.ManyToManyField(blank=True, related_name='subscribingAuthors', to='webtoon.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Webtoon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('titleImage', models.ImageField(upload_to='')),
                ('description', models.CharField(max_length=200)),
                ('isFinished', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploadedWebtoons', to='webtoon.userprofile')),
                ('subscribers', models.ManyToManyField(blank=True, related_name='subscribingWebtoons', to='webtoon.userprofile')),
                ('uploadDays', models.ManyToManyField(related_name='webtoons', to='webtoon.dayofweek')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('content', models.CharField(max_length=20, primary_key=True, serialize=False, unique=True)),
                ('webtoons', models.ManyToManyField(blank=True, related_name='tags', to='webtoon.webtoon')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=300)),
                ('dtCreated', models.DateTimeField(auto_now_add=True)),
                ('dtUpdated', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('createdBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='webtoon.userprofile')),
                ('dislikedBy', models.ManyToManyField(blank=True, related_name='dislikedComments', to='webtoon.userprofile')),
                ('likedBy', models.ManyToManyField(blank=True, related_name='likedComments', to='webtoon.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('episodeNumber', models.IntegerField()),
                ('thumbnail', models.ImageField(upload_to='')),
                ('content', models.ImageField(upload_to='')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('releasedDate', models.DateField(auto_now_add=True)),
                ('likedBy', models.ManyToManyField(blank=True, related_name='likedEpisodes', to='webtoon.userprofile')),
                ('ratedBy', models.ManyToManyField(blank=True, related_name='ratedEpisodes', to='webtoon.userprofile')),
                ('webtoon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='episodes', to='webtoon.webtoon')),
            ],
            options={
                'unique_together': {('webtoon', 'episodeNumber')},
            },
        ),
    ]
